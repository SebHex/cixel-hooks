{
  "extends": [
    "prettier",
    "plugin:prettier/recommended",
    "plugin:react-hooks/recommended"
  ],
  "plugins": ["jsdoc"],
  "rules": {
    "prettier/prettier": "warn",
    "jsdoc/require-jsdoc": ["warn", { "publicOnly": true }],
    "jsdoc/require-description": "warn",
    "jsdoc/require-template": "warn",
    "jsdoc/check-template-names": "warn",
    "jsdoc/require-param": "warn",
    "jsdoc/require-param-type": "warn",
    "jsdoc/require-param-name": "warn",
    "jsdoc/require-param-description": "warn",
    "jsdoc/no-undefined-types": "warn",
    "jsdoc/check-types": "warn",
    "jsdoc/check-tag-names": "warn",
    "jsdoc/empty-tags": "warn",
    "jsdoc/multiline-blocks": "warn",
    "jsdoc/no-defaults": "warn",
    "jsdoc/no-multi-asterisks": "warn",
    "jsdoc/require-asterisk-prefix": "warn",
    "jsdoc/require-description-complete-sentence": "warn",
    "jsdoc/require-returns": "warn",
    "jsdoc/require-returns-type": "warn",
    "jsdoc/require-returns-check": "warn",
    "jsdoc/require-returns-description": "warn",
    "jsdoc/require-yields": "warn",
    "jsdoc/require-yields-check": "warn",
    "jsdoc/sort-tags": ["warn"],
    "jsdoc/tag-lines": ["warn", "any", { "startLines": 1 }],
    "jsdoc/valid-types": "warn"
  },
  "ignorePatterns": ["dist/"],
  "overrides": [
    {
      "files": ["./src/**/*.ts"],
      "plugins": ["tree-shaking"],
      "rules": {
        "tree-shaking/no-side-effects-in-initialization": "error"
      }
    },
    {
      "files": ["**/*.{js,mjs,ts,tsx,mdx}"],
      "plugins": ["perfectionist"],
      "rules": {
        "spaced-comment": "warn",
        "line-comment-position": ["warn", { "position": "above" }],
        "no-console": ["error", { "allow": ["warn", "error"] }],
        "max-len": [
          "warn",
          {
            "ignoreStrings": true,
            "ignoreTemplateLiterals": true,
            "ignoreUrls": true
          }
        ],
        "perfectionist/sort-named-imports": "warn",
        "perfectionist/sort-exports": "warn",
        "perfectionist/sort-imports": [
          "warn",
          {
            "newlinesBetween": "never",
            "internalPattern": ["@/**"],
            "groups": [
              "external-type",
              "builtin-type",
              "internal-type",
              "parent-type",
              "sibling-type",
              "index-type",
              "external",
              "builtin",
              "internal",
              "parent",
              "sibling",
              "index",
              "object",
              "style",
              "side-effect",
              "side-effect-style",
              "unknown"
            ]
          }
        ]
      }
    },
    {
      "files": ["**/*.{js,mjs,ts,tsx}"],
      "plugins": ["unicorn", "no-relative-import-paths"],
      "rules": {
        "object-shorthand": "warn",
        "prefer-arrow-callback": "warn",
        "unicorn/no-for-loop": "warn",
        "unicorn/no-array-for-each": "warn",
        "unicorn/prefer-switch": "warn",
        "unicorn/filename-case": ["error", { "case": "kebabCase" }],
        "unicorn/prevent-abbreviations": [
          "warn",
          {
            "extendDefaultReplacements": false,
            "replacements": {
              "arr": { "array": true },
              "bool": { "boolean": true },
              "btn": { "button": true },
              "btns": { "buttons": true },
              "cb": { "callback": true },
              "comp": { "component": true },
              "comps": { "components": true },
              "ctx": { "context": true },
              "e": {
                "event": true,
                "error": true
              },
              "el": { "element": true },
              "ele": { "element": true },
              "elem": { "element": true },
              "elemnt": { "element": true },
              "er": { "error": true },
              "err": { "error": true },
              "ev": { "event": true },
              "evt": { "event": true },
              "desc": { "description": true },
              "fn": { "function": true },
              "func": { "function": true },
              "img": { "image": true },
              "msg": { "message": true },
              "msgs": { "messages": true },
              "obj": { "object": true },
              "req": { "request": true },
              "res": {
                "response": true,
                "resource": true,
                "result": true
              },
              "str": { "string": true },
              "txt": { "text": true },
              "usr": { "user": true }
            }
          }
        ],
        "no-relative-import-paths/no-relative-import-paths": [
          "warn", { "prefix": "@", "rootDir": "src" }
        ]
      }
    },
    {
      "files": ["**/*.ts?(x)"],
      "plugins": ["@typescript-eslint"],
      "extends": ["plugin:@typescript-eslint/recommended"],
      "rules": {
        "@typescript-eslint/no-var-requires": "warn",
        "@typescript-eslint/consistent-type-imports": "warn",
        "@typescript-eslint/consistent-type-definitions": ["warn", "interface"],
        "@typescript-eslint/array-type": ["warn", { "default": "generic" }],
        "@typescript-eslint/explicit-function-return-type": [
          "warn", { "allowExpressions": true }
        ],
        "@typescript-eslint/no-unused-vars": [
          "warn", { "argsIgnorePattern": "^_" }
        ]
      }
    },
    {
      "files": ["**/*.{tsx,mdx}"],
      "rules": {
        "react/display-name": "warn",
        "no-restricted-syntax": [
          "error",
          {
            "selector": "ImportDeclaration[source.value='react'] :matches(ImportNamespaceSpecifier)",
            "message": "Named * React import is not allowed. Please import what you need from React with Named Imports"
          },
          {
            "selector": "ImportDeclaration[source.value='react'][specifiers.0.type='ImportDefaultSpecifier']",
            "message": "Default React import not allowed since we use the TypeScript jsx-transform. If you need a global type that collides with a React named export (such as `MouseEvent`), try using `globalThis.MouseHandler`"
          }
        ]
      }
    }
  ]
}
